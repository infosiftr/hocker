#!/usr/bin/env bash
set -Eeuo pipefail

panic() {
	{
		echo
		echo 'panic:' "$@"
		echo
		echo "subshell level: $BASH_SUBSHELL"
		echo 'backtrace:'
		local i=0 call
		while call="$(caller "$i")"; do
			local line="$(echo "$call" | cut -d' ' -f1)"
			local func="$(echo "$call" | cut -d' ' -f2)"
			local file="$(echo "$call" | cut -d' ' -f3-)"
			printf '  %q:%s (%q)\n' "$file" "$line" "$func"
			i="$((i+1))"
		done
		echo
	} >&2
	exit 99
}
trap 'panic ERR trap' ERR

hocker_usage() {
	local self="$(basename "$0")"
	cat <<-EOF

		usage:

		  #!/usr/bin/env $self
		  # vim:set ft=sh:

		  # "--name" is defaulted to the name of the script being run
		  hocker_run --name db mysql:5.7 \\
		      --cpus 1.0 \\
		      -- \\
		      --character-set-server=utf8mb4 \\
		      --collation-server=utf8mb4_unicode_ci

	EOF
}

script="${1:-}"
if ! shift || [ -z "$script" ]; then
	hocker_usage >&2
	exit 1
fi

case "$script" in
	--help|-h|'-?')
		hocker_usage
		exit 0
		;;
esac

set_script_vars() {
	[ "$#" -eq 0 ] || script="$1"
	[ -n "$script" ] || panic "missing 'script' name"
	[ -r "$script" ] || panic "script '$script' not readable (does it exist?)"

	scriptDir="$(cd "$(dirname "$script")" && pwd)" # absolute, but not dereferenced (directory of the symlink)
	scriptName="$(basename "$script")" # just the name of the symlink (default container name)
	script="$scriptDir/$scriptName" # absolute, but not dereferenced (the symlink)
	absScript="$(readlink -f "$script")" # target of the symlink
	absDir="$(dirname "$absScript")" # directory of the target of the symlink
}
set_script_vars

declare -A flagDefaults=(
	[pull]='missing'
	[build]='missing'
	[redeploy]='never'
)
script_usage() {
	cat <<-EOF

		usage: $scriptName [options]
		   ie: $scriptName --redeploy smart --pull always
		       $scriptName --redeploy always
		       $scriptName --pull never

		options:

		  --pull [always|missing|never] (default: ${flagDefaults[pull]})

		  --build [always|missing|never] (default: ${flagDefaults[build]})

		  --redeploy [smart|always|never] (default: ${flagDefaults[redeploy]})

		  -p (alias for '--pull always')
		  -b (alias for '--build always')
		  -s (alias for '--redeploy smart')
		  -f (alias for '--redeploy always')

	EOF
}

script_error() {
	{
		[ "$#" -eq 0 ] || echo 'error:' "$@"
		script_usage
	} >&2
	exit 1
}

if ! opts="$(getopt -o '+h?pbsf' --long 'help,pull:,build:,redeploy:,interactive' -- "$@")"; then
	script_error # getopt already put an error to stderr like: getopt: unrecognized option '--wtf'
fi
eval set -- "$opts"
unset opts

declare -A flagValues=(
	[pull]=
	[build]=
	[redeploy]=
	[interactive]=
)
while true; do
	flag="$1"
	shift
	case "$flag" in
		--help|-h|'-?') script_usage && exit 0 ;;

		--pull) flagValues[pull]="$1" && shift ;;
		-p) flagValues[pull]='always' ;;

		--build) flagValues[build]="$1" && shift ;;
		-b) flagValues[build]='always' ;;

		--redeploy) flagValues[redeploy]="$1" && shift ;;
		-s) flagValues[redeploy]='smart' ;;
		-f) flagValues[redeploy]='always' ;;

		--interactive) flagValues[interactive]=1 ;; # "secret tunnel, secret tunnel" (this is an intentionally undocumented feature)

		--) break ;;
		*) script_error "unknown flag '$flag'" ;;
	esac
done
unset flag

interactiveArguments=()
if [ "$#" -gt 0 ]; then
	if [ -z "${flagValues[interactive]}" ]; then
		: #script_error "unexpected arguments: $*"
		# ("multihocker" is implemented as a hocker that takes arguments /o\)
	else
		interactiveArguments=( "$@" )
	fi
fi

hocker_run() {
	local opts
	if ! opts="$(getopt -o '+' --long 'name:,build:,build-arg:,platform:' -- "$@")"; then
		panic 'hocker_run getopt failed' # getopt already put an error to stderr like: getopt: unrecognized option '--wtf'
	fi
	eval set -- "$opts"

	local containerName="$scriptName" buildDir= buildArgs=() platform=
	while true; do
		local flag="$1"
		shift
		case "$flag" in
			# --redeploy-hook ? (for HUP nginx, etc)
			--name) containerName="$1" && shift ;;
			--build) buildDir="$1" && shift ;;
			--build-arg) buildArgs+=( "$1" ) && shift ;;
			--platform) platform="$1" && shift ;;
			--) break ;;
			*) panic "unknown hocker_run flag '$flag'" ;;
		esac
	done

	if [ -n "$buildDir" ]; then
		[ -d "$buildDir" ] || script_error "--build specified but '$buildDir' is not a directory"
	fi
	if [ "${#buildArgs[@]}" -gt 0 ] && [ -z "$buildDir" ]; then
		script_error "--build-arg specified but '--build' was not"
	fi

	local imageName="$1"
	shift

	local dockerArgs=(
		--name "$containerName"
		--pull never
	)
	if [ -n "$platform" ]; then
		dockerArgs+=( --platform "$platform" )
	fi
	if [ -z "${flagValues[interactive]}" ]; then
		dockerArgs+=(
			--detach
			--restart always
		)
	else
		dockerArgs+=(
			--interactive
			--rm
		)
		if [ -t 0 ] && [ -t 1 ] && [ -t 2 ]; then
			dockerArgs+=( --tty )
		fi
	fi
	while [ "$#" -gt 0 ]; do
		local arg="$1"
		shift
		if [ "$arg" = '--' ]; then
			break
		fi
		dockerArgs+=( "$arg" )
	done

	local containerArgs=( "$imageName" )
	if [ -z "${flagValues[interactive]}" ] || [ "${#interactiveArguments[@]}" -eq 0 ]; then
		containerArgs+=( "$@" )
	else
		dockerArgs+=( --entrypoint "${interactiveArguments[0]}" )
		if [ "${#interactiveArguments[@]}" -gt 1 ]; then
			containerArgs+=( "${interactiveArguments[@]:1}" )
		fi
	fi

	echo

	local missingImage= missingImages=() alwaysPull=( "$imageName" )
	if ! docker inspect --type image "$imageName" &> /dev/null; then
		missingImage="$imageName"
		missingImages+=( "$imageName" )
	fi

	local imageToPull="$imageName"
	local doBuild=
	if [ -n "$buildDir" ]; then
		local build="${flagValues[build]:-${flagDefaults[build]}}"
		case "$build" in
			always) doBuild=1 ;;
			missing) doBuild="$missingImage" ;;
			never)
				if [ -n "$missingImage" ]; then
					script_error "missing image '$missingImage' and --build is 'never'"
				fi
				;;
			*) script_error "unrecognized value for --build '$build'" ;;
		esac
		buildFroms="$(
			awk '
				toupper($1) == "FROM" { print $2 }
				toupper($1) == "COPY" {
					for (i = 2; i < NF; i++) {
						if ($i !~ /^--/) { break }
						if ($i ~ /^--from=/) { gsub(/^--from=/, "", $i); print $i }
					}
				}
			' "$buildDir/Dockerfile"
		)"
		# reset "alwaysPull" and "missingImages" since if we're supposed to build $imageName, we shouldn't ever pull $imageName
		alwaysPull=(); missingImages=()
		for buildFrom in $buildFroms; do
			alwaysPull+=( $buildFrom )
			if ! docker inspect "$buildFrom" &> /dev/null; then
				missingImages+=( "$buildFrom" )
			fi
		done
	fi

	local doPull=()
	local pull="${flagValues[pull]:-${flagDefaults[pull]}}"
	case "$pull" in
		always) doPull=( "${alwaysPull[@]}" ) ;;
		missing) doPull=( "${missingImages[@]}" ) ;;
		never)
			if [ "${#missingImages[@]}" -gt 0 ]; then
				script_error "--pull is 'never' and missing images: ${missingImages[*]}"
			fi
			;;
		*) script_error "unrecognized value for --pull '$pull'" ;;
	esac

	if [ "${#doPull[@]}" -gt 0 ]; then
		for imageToPull in "${doPull[@]}"; do
			echo "Pulling '$imageToPull' ..."
			local pullArgs=( "$imageToPull" )
			if [ -n "$platform" ]; then
				pullArgs=( --platform "$platform" "${pullArgs[@]}" )
			fi
			docker pull "${pullArgs[@]}"
		done
	else
		echo "Not pulling (--pull '$pull'): ${alwaysPull[*]}"
	fi
	if [ "$doBuild" ]; then
		echo
		echo "Building '$imageName' (from '$buildDir') ..."
		buildArgs+=( --tag "$imageName" )
		if [ -n "$platform" ]; then
			buildArgs+=( --platform "$platform" )
		fi
		buildArgs+=( "$buildDir" )
		docker build "${buildArgs[@]}"
	elif [ -n "$buildDir" ]; then
		echo
		echo "Not building '$imageName' (--build '$build')"
	fi
	echo

	local missingContainer=
	if ! docker inspect --type container "$containerName" &> /dev/null; then
		missingContainer=1
	fi
	local doDeploy="$missingContainer"
	local redeploy="${flagValues[redeploy]:-${flagDefaults[redeploy]}}"
	case "$redeploy" in
		always) doDeploy=1 ;;
		never) ;; # never REdeploy -- used to deploy at least once (so whether to deploy depends on whether our container is missing)
		smart)
			if [ ! "$missingContainer" ]; then
				local containerImageId="$(docker inspect --format '{{ .Image }}' --type container "$containerName")"
				local imageId="$(docker inspect --format '{{ .Id }}' --type image "$imageName")"
				if [ "$containerImageId" != "$imageId" ]; then
					doDeploy=1
				fi
			fi
			;;
		*) script_error "unrecognized value for --redeploy '$redeploy'" ;;
	esac

	if [ "$doDeploy" ]; then
		if [ ! "$missingContainer" ]; then
			echo "Stopping '$containerName' ..."
			docker stop "$containerName"
			if docker container inspect "$containerName" &> /dev/null; then # container might have "--rm" and be gone already via stop
				echo "Removing '$containerName' ..."
				docker rm "$containerName"
			fi
		fi
		echo

		echo "Starting '$containerName' (from '$imageName') ..."
		docker run "${dockerArgs[@]}" "${containerArgs[@]}" # imageName is in containerArgs (see http://stackoverflow.com/a/7577209/433558)
	else
		restarting="restarting '$containerName' (--redeploy '$redeploy')"
		if [ -n "${flagValues[interactive]}" ]; then
			script_error "not $restarting, but --interactive requested"$'\n'"  (try -f?  will stop/remove '$containerName')"
		fi
		echo "Not $restarting"
	fi
	echo
}

hocker_network_create() {
	local networkName="$1"
	shift

	echo

	if ! docker network inspect "$networkName" &> /dev/null; then
		echo "Creating network '$networkName' ..."
		docker network create "$@" "$networkName"
	else
		echo "Not creating network '$networkName' (already exists)"
	fi
}

_hocker_network_has_container() {
	local networkName="$1"
	shift
	local containerName="$1"
	shift

	local containerNetworks=( $(
		docker inspect --type container --format '
			{{- range $n, $d := .NetworkSettings.Networks -}}
				{{- $n -}}{{- "\n" -}}
			{{- end -}}
		' "$containerName" 2>/dev/null
	) )
	if [ "${#containerNetworks[@]}" -gt 0 ]; then
		for network in "${containerNetworks[@]}"; do
			if [ "$network" = "$networkName" ]; then
				return 0
			fi
		done
	fi
	return 1
}

hocker_network_connect() {
	local opts
	if ! opts="$(getopt -o '+' --long 'container:' -- "$@")"; then
		panic 'hocker_network_connect getopt failed' # getopt already put an error to stderr like: getopt: unrecognized option '--wtf'
	fi
	eval set -- "$opts"

	local containerName="$scriptName" buildDir=
	while true; do
		local flag="$1"
		shift
		case "$flag" in
			--container) containerName="$1" && shift ;;
			--) break ;;
			*) panic "unknown hocker_network_connect flag '$flag'" ;;
		esac
	done

	local networkName="$1"
	shift

	if ! _hocker_network_has_container "$networkName" "$containerName"; then
		echo "Connecting '$containerName' to network '$networkName' ..."
		docker network connect "$@" "$networkName" "$containerName"
	else
		echo "Not connecting '$containerName' to network '$networkName' (already connected)"
	fi
}

source "$script"
